####  03/16/2018 Update ########################################################
# Original Python code was written by Ben Chun                                 #
################################################################################

###################################################################################
## Model Specification 							  #########
####### 1. Cell type: HEK293T                                       ###############
####### 2. rP2X4, rP2X7						    ###############
####### 3. 13-state model, 12 state model			    ###############
###################################################################################
## Periodicity control examples are listed in https://docs.google.com/spreadsheets/d/1UpXEe90q5Tlcu7qWv07B5SrVTGP-gYaGT6FGdsQigr8/edit?usp=sharing

parameters("stimulation",
    #stim_start = ScalarParam(10, unit="s"),
    stim_period = ScalarParam(6e3, unit="ms"), # stim_duration = stim_period/2
    stim_low = ScalarParam(1e3, unit="ms"),
    stim_high = ScalarParam(2e3, unit="ms"),
    stim_gap1 = ScalarParam(5e3, unit="ms"),
    stim_gap2 = ScalarParam(5e3, unit="ms"),
    ICatp = ScalarParam(1.5e3, unit="ms"),
    stim_amplitude = ScalarParam(1000, unit="uM"),
    pulse_switch = ScalarParam(1) # 1 = pulse is on, 0 = pulse is off
    )

parameters("MSMp2x4",
    k1_ptxf = ScalarParam(1.0e-4, unit="ms**-1"),
    k2_ptxf = ScalarParam(2610, unit="(M*ms)**-1"),
    k3_ptxf = ScalarParam(3.915, unit="ms**-1"),
    k4_ptxf = ScalarParam(11537.9, unit="(M*ms)**-1"),
    k5_ptxf = ScalarParam(0.000652, unit="ms**-1"), #3.0e1
    k6_ptxf = ScalarParam(3461.38, unit="(M*ms)**-1"),
    H1_ptxf = ScalarParam(1.67e-5, unit="ms**-1"),
    H2_ptxf = ScalarParam(0.00026, unit="ms**-1"),
    H3_ptxf = ScalarParam(1.56e-3, unit="ms**-1"),
    H4_ptxf = ScalarParam(0.0237e-3, unit="ms**-1"),
    H5_ptxf = ScalarParam(0.0013, unit="ms**-1"), #8e-3
    H6_ptxf = ScalarParam(0.00018, unit="ms**-1")
    )

parameters("MSMp2x7",
    k1_ptxs = ScalarParam(3.94e-5, unit="ms**-1"),
#    k2_ptxs = ScalarParam(3.19852, unit="(M*ms)**-1"),
    k3_ptxs = ScalarParam(4.95e-4, unit="ms**-1"),
#    k4_ptxs = ScalarParam(1.155, unit="(M*ms)**-1"),
    k5_ptxs = ScalarParam(5.7e-4, unit="ms**-1"),
#    k6_ptxs = ScalarParam(9.6997e-2, unit="(M*ms)**-1"),
    H5_ptxs = ScalarParam(2.94e-5, unit="ms**-1"),
    H1_ptxs = ScalarParam(0.5e-5, unit="ms**-1"),
    H2_ptxs = ScalarParam(1e-4, unit="ms**-1"),
    H6_ptxs = ScalarParam(1e-4, unit="ms**-1"),
#    H7_ptxs = ScalarParam(0, unit="ms**-1")
    )

parameters("Ip2x4",
    G12_ptxf = ScalarParam(2.124e-13, unit="C*(ms*V)**-1"),
    V_ptxf = ScalarParam(-0.023, unit="V"),  # 60 mV was used in MSM
    E12_ptxf = ScalarParam(0, unit="V"),
    CaA_ptxf = ScalarParam(0.0824) # fraction of current contributed by Calcium transport
    )

parameters("Ip2x7",
    G12_ptxs = ScalarParam(2.00e-12, unit="C*(ms*V)**-1"),
    V_ptxs = ScalarParam(-0.023, unit="V"),  # 60 mV was used in MSM
    E12_ptxs = ScalarParam(0, unit="V"),
    CaA_ptxs = ScalarParam(0.1) # fraction of current contributed by Calcium transport
    )

parameters("Jp2x",
    F = ScalarParam(96485.33289, unit="C*mol**-1"),
    rHEK = ScalarParam(6.5e-6, unit="m"),
    rMiG = ScalarParam(2.6e-6, unit="m"),
    expF_ptxf = ScalarParam(1), # 0.012
    expF_ptxs = ScalarParam(1),
    CmHEK = ScalarParam(38.6, unit="pA*pF**-1"),
    CmMG = ScalarParam(0.6, unit="pA*pF**-1"),
    SAptxf = ScalarParam(1),
    SAptxs = ScalarParam(1),
    SAca = ScalarParam(1)
    )

parameters("Buffer_cyto",
    BmFura = ScalarParam(0.025e3, unit="uM"), # [M] -> Shannon-Bers: Fluo-3 (Cytoplasm)
    KonFura = ScalarParam(15e-2, unit="(uM*ms)**-1"),    # [1/(M*s)] -> Chemical Calcium Indicators: Fura-2 (Cytoplasm)
    KoffFura = ScalarParam(23e-3, unit="ms**-1"),     # [1/s] -> Chemical Calcium Indicators: Fura-2 (Cytoplasm)
    # Constants for CaM-CN calculation: taken from the work of Bazzazi et al. by Rachel
    kba  = ScalarParam(10e-3, unit="ms**-1"),        # [s-1]
    kab = ScalarParam(1e-2, unit="uM**-2*ms**-1"),       # [M-2*s-1]
    kcb = ScalarParam(500e-3, unit="ms**-1"),        # [s-1]
    kbc = ScalarParam(500e-2, unit="uM**-2*ms**-1"),     # [M-2*s-1]
    koffA = ScalarParam(1e-3, unit="ms**-1"),      # [s-1]
    konA = ScalarParam(1e1, unit="uM**-1*ms**-1"),      # [M-1*s-1]
    konB = ScalarParam(2e-3, unit="uM**-2*ms**-1"),      # [M-2*s-1]
    koffB = ScalarParam(1e-3, unit="ms**-1"),        # [s-1]
    CNt = ScalarParam(2, unit="uM"),       #[uM]
    CaMt = ScalarParam(3, unit="uM"),       #[uM]
    SAcn = ScalarParam(1),
    SAcm = ScalarParam(1),
    ## Extra Buffers
    konBex = ScalarParam(10, unit="uM*ms**-1"), # 1.5
    koffBex = ScalarParam(10, unit="ms**-1"),
    Bmaxex = ScalarParam(111000, unit="uM") # 50
    )

parameters("Buffer_ER",
    BmCals = ScalarParam(0.14e3, unit="uM"),   # [M] -> Shannon-Bers: Calsequestrin (ER)
    KonCals = ScalarParam(10e-2, unit="(uM*ms)**-1"),    # [1/(M*s)] -> Shannon-Bers: Calsequestrin (ER)
    KoffCals = ScalarParam(65000e-3, unit="ms**-1"),   # [1/s] -> Shannon-Bers: Calsequestrin (ER))
    rV_ER = ScalarParam(0.0875)
    )

parameters("NCX",
    R = ScalarParam(8.314, unit="J*(mol*K)**-1"),          # [J/mol-k]
    T_NCX = ScalarParam(310, unit="K"),                    # K
    VmaxNCX = ScalarParam(38, unit="A*F**-1"),            # [A/F] modifeid from 38
    KmCai_NCX = ScalarParam(3.59, unit="uM"),            # [M]
    KmCao_NCX = ScalarParam(1.3e3, unit="uM"),             # [M]
    KmNai_NCX = ScalarParam(12.29e3, unit="uM"),           # [M]
    KmNao_NCX = ScalarParam(87.5e3, unit="uM"),            # [M]
    ksat_NCX = ScalarParam(0.27),
    eta_NCX = ScalarParam(0.55),
    KdAct_NCX = ScalarParam(0.18, unit="uM"),      # [uM] 0.26
    HNa_NCX = ScalarParam(3.25),
    Q10NCX = ScalarParam(1.57),
    uniC_NCX = ScalarParam(1e-2, unit="F*m**-2"),         # [F/m**2] unit conductance
    Vncx = ScalarParam(-0.023, unit="V"),       # [V] -> the holding potential (used in NCX calculation as well)
    Fncx = ScalarParam(96485.33289, unit="C/mol"), # Faraday constant in [C/mol])
    nHillncx = ScalarParam(3),
    Cm = ScalarParam(12e-12, unit="F"),
    ## Fixted substance concentrations
    Nae_NCX = ScalarParam(145e3, unit="uM"),       # [M] Exocytosolic Na free concentration
    Nai_NCX = ScalarParam(8e3, unit="uM"),         # [M] Cytosolic Na free concentration -> Neuroglia p.190 Fig 16.4 the range from 8-20 mM
    Cae_NCX = ScalarParam(2e3, unit="uM"),         # [M] Exocytosolic Ca free concentration
    SAnancx = ScalarParam(1)
    )

parameters("SERCA_ER",
    Q10ERCa = ScalarParam(2.6),
    VmaxSERCA = ScalarParam(5.3114, unit="uM*ms**-1"),       # [M/s] taken from script but their literature reported differently: This may need to be adjusted
    Kmf_SERCA = ScalarParam(0.246, unit="uM"),        # [uM]
    Kmr_SERCA = ScalarParam(1.7e3, unit="uM"),          # [mM]
    H_SERCA = ScalarParam(1.787),
    T_SERCA = ScalarParam(310),                # K
    SAserca = ScalarParam(1)
    )

parameters("p-p38",
    kb_pp38 = ScalarParam(0.0018518519e-3, unit="ms**-1"),
    kf_pp38 = ScalarParam(0.96114456e-7, unit="(uM*ms)**-1"),
    kdcapp38 = ScalarParam(0.08066, unit="uM"),
    ncapp38 = ScalarParam(5.5),
    pp38t = ScalarParam(100, unit="molecule"),
    SApp38 = ScalarParam(1)
    )

parameters("NFAT",
    kf1_NFAT = ScalarParam(9.0e-10, unit="(nM*ms)**-1"),    # [1/(nMs)]  7.69e-6 5.2e-10
    kr1_NFAT = ScalarParam(1.93e-2, unit="ms**-1"),   # [1/s] 1.93e-2
    kf2_NFAT = ScalarParam(1.44e-3, unit="ms**-1"),   # [1/s] 1.44e-3
    kf3_NFAT = ScalarParam(3.62e-4, unit="ms**-1"),   # [1/s] 3.62e-4
    kr3_NFAT = ScalarParam(9.71e-5, unit="(nM*ms)**-1"),   # [1/(nMs)] 4.71e-3
    kf4_NFAT = ScalarParam(4.45e-4, unit="ms**-1"),   # [1/s] 4.45e-4
    KmN_NFAT = ScalarParam(535, unit="nM"),        # [nM]
    n_NFAT = ScalarParam(2.92),
    Ccn_NFAT = ScalarParam(1),          # Volume ratio of Cytosol to Nucleus
    NFATt = ScalarParam(1.1, unit="nM"),
    SAnfat = ScalarParam(1)
    )


parameters("TNFa",
    ktrnscrpt_TNF = ScalarParam(277.78e-9, unit="ms**-1"),   # 1/3600            # [1/s]: k for transcription of mRNA from DNA per molecule
    ktrnsl_TNF = ScalarParam(27.7778e-6, unit="ms**-1"),     # 100/3600          # [1/s]: k for translation of TNFa from mRNA per molecule
    kdegTNF_TNF = ScalarParam(13.8889e-6, unit="ms**-1"),    # 50/3600           # [1/s]: the rate of degradation of TNFa per molecule
    kdegRNA_TNF = ScalarParam(13.5e-6, unit="ms**-1"),   # 0.5/3600          # [1/s]: the rate of degradation of mRNA per molecule
    kgeneexpf_TNF = ScalarParam(111.11e-9, unit="(molecule*ms)**-1"),   # 1/(3600*2.5)      # [1/(molecule-s)]: Gene expression
    kgeneexpr_TNF = ScalarParam(277.78e-9, unit="ms**-1"),   # 1/3600            # [1/s]:
    ### Hill equation related constants for activation of DNA dynamics/TNFa release
    IC50pp38_TNF = ScalarParam(2.6, unit="molecule"),
    npp38_TNF = ScalarParam(1.5),
    ### Exocytosis related ##########
    kmaxexo_TNF = ScalarParam(1e-7, unit="(uM*ms)**-1"), # 5/1800        # [1/(M-s)]: R max of exocytosis of TNFa 150 15 15 10 1
    IC50Caleak_TNF = ScalarParam(0.100, unit="uM"),         # [uM]: TNFa leaks related 4e-7 4e-7 1e-7 1e-7 1e-7 0.0968
    nCaleak_TNF = ScalarParam(2) # 3
    )

parameters("Leakage",
    CaExt = ScalarParam(2e3, unit="uM"),      # External Ca concentration in [M]
    DExtoCy = ScalarParam(0.15e-4, unit="ms**-1"),    # Diffusion constant of Ca from External to Cytosol - Fitted
    DERtoCy = ScalarParam(0.45e-5, unit="ms**-1")     # Diffusion constant of Ca from ER to Cytosol
    )

states("MSMp2x4",
    D1_ptxf = 0.0,
    D2_ptxf = 0.0,
    D3_ptxf = 0.0,
    D4_ptxf = 0.0,
    C1_ptxf = 1.0,
    C2_ptxf = 0.0,
    Q1_ptxf = 0.0,
    Q2_ptxf = 0.0,
    Q12_ptxf = 0.0, # PKH 
    N_ptxf = 0.0,
    D12_ptxf = 0.0
    )

states("MSMp2x7",
    D1_ptxs = 0.0,
    D2_ptxs = 0.0,
    D3_ptxs = 0.0,
    D4_ptxs = 0.0,
    C1_ptxs = 1.0,
    C2_ptxs = 0.0,
    Q1_ptxs = 0.0,
    Q2_ptxs = 0.0,
    Q12_ptxs = 0.0,
    D12_ptxs = 0.0
    )

states("Ca_cyto",
    Cai = ScalarParam(0.0813, unit="uM"),
    Captxs = ScalarParam(0, unit="uM"),
    Captxf = ScalarParam(0, unit="uM"),
    Catot = ScalarParam(0, unit="uM")
    )

states("Buffer_cyto",
    CaF = ScalarParam(8.66, unit="uM"),         # M
    Ca2_CaM = ScalarParam(0.0179, unit="uM"),                   # M
    Ca4_CaM = ScalarParam(0.00118, unit="uM"),                   # M
    Ca4_CN = ScalarParam(0.0226, unit="uM"),                    # M
    CaMCN = ScalarParam(0.286, unit="uM"),
    CaBex = ScalarParam(8232.96, unit="uM")                       # M  81990.4072933
    )

states("Ca_ER",
    CaER = ScalarParam(560, unit="uM")       # M
    )

states("Buffer_ER",
    CaS = ScalarParam(741, unit="uM")        # M
    )

states("SERCA_ER",
    SERCA = 0
    )

states("NFAT",
    NFATpc = ScalarParam(1.096, unit="nM"),        # nM 0.994682667758
    NFATpn = ScalarParam(4.72e-5, unit="nM"),       # nM 0.0463772043925
    #NFATNc = ScalarParam(0.000112322167638, unit="nM"),     # nM 0.000112322167638
    NFATNn = ScalarParam(0.004, unit="nM")        # nM 0.0581439005689
    )

states("NCX",
    NCX = 0
    )

states("p-p38",
    pp38 = ScalarParam(2.58, unit="molecule")                      # molecule
    #p38 = ScalarParam(49.47, unit="molecule")                        # molecule
    )

states("TNFa",
    DNA_TNF = ScalarParam(50, unit="molecule"),                  # molecule
    DNATNF = ScalarParam(0, unit="molecule"),                    # molecule
    mRNA_TNF = ScalarParam(0, unit="molecule"),                  # molecule
    TNFa = ScalarParam(0, unit="molecule")                    # molecule
    # TNFa_release = ScalarParam(0, unit="molecule")               # molecule
    )

states("Leakage",
    CaExtoCy = ScalarParam(0, unit="uM"), # in [M]
    CaERtoCy = ScalarParam(0, unit="uM")  # in [M]
    )

states("Cell",
    V = 0
    )

expressions("Cell")
dV_dt = 0 # Place holder

#ATP71 = stim_amplitude#Conditional(Le(stim_amplitude,4.118),stim_amplitude,4.11863563*exp(stim_amplitude*0.00479906))

newta = time - floor(time/stim_period)*stim_period
newtb = (time + stim_gap1) - floor((time + stim_gap2)/stim_period)*stim_period
head = 1/(1+(ICatp/newta)**80)
tail = 1/(1+(newtb/ICatp)**80)

scale = Conditional(And(Ge(time-floor(time/stim_period)*stim_period,stim_low),Le(time-floor(time/stim_period)*stim_period,stim_high),),head,tail)
ATPptxf_pulse = scale*stim_amplitude*10**-6
ATPptxs_pulse = scale*stim_amplitude*10**-6

ATPptxf_steady = stim_amplitude*10**-6
ATPptxs_steady = stim_amplitude*10**-6

ATPptxf = Conditional(Eq(pulse_switch,1),ATPptxf_pulse,ATPptxf_steady)
ATPptxs = Conditional(Eq(pulse_switch,1),ATPptxs_pulse,ATPptxs_steady)

expressions("MSMp2x4")
# PKH lumping 
k01 = 2*k4_ptxf*ATPptxf
k10 = 2*k3_ptxf
k12 = k6_ptxf*ATPptxf
k21 = 3*k5_ptxf
k24 = H6_ptxf  # Q2->D4
k42 = 0        # D4->Q2
K12 = k12/k21
a1p = k01
a1m = k10/(1+K12)
a2p = k24/(1+1/K12)
a2m = k42

f01 = 0
f10 = H1_ptxf
f12 = 3*k2_ptxf*ATPptxf
f21 = k1_ptxf
f23 = 0
f32 = H2_ptxf
F12 = f12/f21
b1p = f01
b1m = f12/(1+F12)
b2p = f23/(1+1/F12)
b2m = f32

#dD1_ptxf_dt = k1_ptxf*D2_ptxf - (3*k2_ptxf*ATPptxf + H1_ptxf)*D1_ptxf
#dD2_ptxf_dt = 3*k2_ptxf*ATPptxf*D1_ptxf + 2*k3_ptxf*D3_ptxf + H2_ptxf*C2_ptxf - (k1_ptxf + 2*k4_ptxf*ATPptxf)*D2_ptxf
dD1_ptxf_dt = 0
dD2_ptxf_dt = 0
dD12_ptxf_dt = C2_ptxf*b2m - D12_ptxf*b1m - D12_ptxf*2*k4_ptxf*ATPptxf + D3_ptxf*2*k3_ptxf
            #
dD3_ptxf_dt = 2*k4_ptxf*ATPptxf*D2_ptxf + 3*k5_ptxf*D4_ptxf + H5_ptxf*Q1_ptxf - (2*k3_ptxf + k6_ptxf*ATPptxf)*D3_ptxf
dD4_ptxf_dt = k6_ptxf*ATPptxf*D3_ptxf +      a2p*Q12_ptxf - (3*k5_ptxf + H3_ptxf + a2m)*D4_ptxf
#dC1_ptxf_dt = H1*D1_ptxf + k1_ptxf*C2_ptxf + H4_ptxf*N_ptxf - 3*k2_ptxf*ATPptxf*C1_ptxf
#dC2_ptxf_dt = 3*k2_ptxf*ATPptxf*C1_ptxf + a1m*Q12_ptxf - (k1_ptxf + a1p + H2_ptxf)*C2_ptxf
dC1_ptxf_dt = b1m*D12_ptxf + k1_ptxf*C2_ptxf + H4_ptxf*N_ptxf - 3*k2_ptxf*ATPptxf*C1_ptxf
dC2_ptxf_dt = 3*k2_ptxf*ATPptxf*C1_ptxf + a1m*Q12_ptxf - (k1_ptxf + a1p + b2m)*C2_ptxf
dQ12_ptxf_dt = a2m*D4_ptxf +  a1p*C2_ptxf  - (a1m + a2p)*Q12_ptxf
dN_ptxf_dt = H3_ptxf*D4_ptxf - H4_ptxf*N_ptxf
dQ1_ptxf_dt = 0
dQ2_ptxf_dt = 0


expressions("MSMp2x7")

k2_ptxs = Conditional(Ge(stim_amplitude,500),3.2,4)
k4_ptxs = Conditional(Ge(stim_amplitude,500),1.155,2)
k6_ptxs = Conditional(Ge(stim_amplitude,500),9.7e-2,0.01)
H7_ptxs = Conditional(Ge(stim_amplitude,500),1.2e-5,1e-7) # control tail

l01 = 2*k4_ptxs*ATPptxs
l10 = 2*k3_ptxs
l12 = k6_ptxs*ATPptxs
l21 = 3*k5_ptxs
l24 = H6_ptxs  # Q2->D4
l42 = 0        # D4->Q2
L12 = l12/l21
c1p = l01
c1m = l10/(1+L12)
c2p = l24/(1+1/L12)
c2m = l42

j01 = 0
j10 = H1_ptxs
j12 = 3*k2_ptxs*ATPptxs
j21 = k1_ptxs
j23 = H7_ptxs
j32 = H2_ptxs
J12 = j12/j21
d1p = j01
d1m = j10/(1+J12)
d2p = j23/(1+1/J12)
d2m = j32

#dD1_ptxs_dt = k1_ptxs*D2_ptxs - (3*k2_ptxs*ATPptxs + H1_ptxs)*D1_ptxs #
#dD2_ptxs_dt = 3*k2_ptxs*ATPptxs*D1_ptxs + 2*k3_ptxs*D3_ptxs + H2_ptxs*C2_ptxs - (k1_ptxs + 2*k4_ptxs*ATPptxs + H7_ptxs)*D2_ptxs #
dD1_ptxs_dt = 0
dD2_ptxs_dt = 0
dD12_ptxs_dt = C1_ptxs*d1p + C2_ptxs*d2m - D12_ptxs*(d1m + d2p)
#dD3_ptxs_dt = 2*k4_ptxs*ATPptxs*D2_ptxs + 3*k5_ptxs*D4_ptxs + H5_ptxs*Q1_ptxs - (2*k3_ptxs + k6_ptxs*ATPptxs)*D3_ptxs #
dD3_ptxs_dt = 2*k4_ptxs*ATPptxs*D12_ptxs + 3*k5_ptxs*D4_ptxs + H5_ptxs*Q1_ptxs - (2*k3_ptxs + k6_ptxs*ATPptxs)*D3_ptxs
#dC1_ptxs_dt = H1_ptxs*D1_ptxs + k1_ptxs*C2_ptxs - 3*k2_ptxs*ATPptxs*C1_ptxs #
#dC2_ptxs_dt = H7_ptxs*D2_ptxs + 3*k2_ptxs*ATPptxs*C1_ptxs + c1m*Q12_ptxs - (k1_ptxs + c1p + H2_ptxs)*C2_ptxs
dC1_ptxs_dt = d1m*D12_ptxs + k1_ptxs*C2_ptxs - 3*k2_ptxs*ATPptxs*C1_ptxs
dC2_ptxs_dt = d2p*D12_ptxs + 3*k2_ptxs*ATPptxs*C1_ptxs + c1m*Q12_ptxs - (k1_ptxs + c1p + d2m)*C2_ptxs
            #
dD4_ptxs_dt = k6_ptxs*ATPptxs*D3_ptxs + c2p*Q12_ptxs - (3*k5_ptxs + c2m)*D4_ptxs
dQ12_ptxs_dt = c2m*D4_ptxs + c1p*C2_ptxs - (c1m + c2p)*Q12_ptxs
dQ1_ptxs_dt = 0
dQ2_ptxs_dt = 0


expressions("Ip2x4")
#I_ptxf = ((G12_ptxf*(Q1_ptxf + Q2_ptxf)*(V_ptxf - E12_ptxf))*10**6)
I_ptxf = ((G12_ptxf*(Q12_ptxf)*(V_ptxf - E12_ptxf))*10**6)
#I_f = ((G12_ptxf*(Q1_ptxf + Q2_ptxf)*(-0.06 - E12_ptxf))*10**6)

expressions("Ip2x7")
#I_ptxs = ((G12_ptxs*(Q1_ptxs + Q2_ptxs)*(V_ptxs - E12_ptxs))*10**6) # in [uC/ms]
I_ptxs = ((G12_ptxs*(Q12_ptxs)*(V_ptxs - E12_ptxs))*10**6) # in [uC/ms]
#I_s = ((G12_ptxs*(Q1_ptxs + Q2_ptxs)*(-0.04 - E12_ptxs))*10**6) # in [uC/ms]

expressions("Jp2x")
AHEK = 4*3.141592654*(rHEK)**2 # surface area of HEK293 cell in [sq. meter]
AMiG = 4*3.141592654*(rMiG)**2 # surface area of microglia in [sq. meter]
VHEK = 1000*(4/3)*3.141592654*(rHEK)**3 # volume of HEK293 cell in [L]
VMiG = 1000*(4/3)*3.141592654*(rMiG)**3 # volume of microglia in [L]
VcytHEK = VHEK*0.65 # [L] The volume of cytoplasm in HEK293 cells -> This fraction was taken from Shannon-Bers paper
VcytMiG = VMiG*0.40 # [L] The volume of cytoplasm in microglia -> This fraction was estimated from the figure (Liaury).
VERMiG = VMiG*0.035 # [L] The volume of ER lumen in microglia -> This fraction was taken from Shannon-Bers paper
#CHEK = 12*(10**9)*AHEK
#J_ptxf = -(I_ptxf/VcytMiG)*(CmMG/CmHEK)/(2*F)*expF_ptxf*SAptxf # [umol/(L*ms) = uM/ms] 12 pF from Microglia and it wad divided by 12*10**9 pF/m^2 * A_HEK
J_ptxf = -(I_ptxf*CaA_ptxf/VcytMiG)/(2*F)*expF_ptxf*SAptxf
J_ptxs = -(I_ptxs*CaA_ptxs/VcytMiG)/(2*F)*expF_ptxs*SAptxs # [umol/(L*ms) = uM/ms] 12 pF from Microglia and it wad divided by 12*10**9 pF/m^2 * A_HEK

expressions("Buffer_cyto")
CaM = CaMt*SAcm - (Ca2_CaM + Ca4_CaM + CaMCN)
Ca2_CN = CNt - (Ca4_CN + CaMCN)
#CNt*SAcn - (Ca4_CN + CaMCN)
dCa2_CaM = kab*CaM*(Cai**2) - kba*Ca2_CaM + kcb*Ca4_CaM - kbc*Ca2_CaM*(Cai**2)
dCa2_CaM_dt = dCa2_CaM
dCa4_CaM = kbc*(Cai**2)*Ca2_CaM - kcb*Ca4_CaM + koffA*CaMCN - konA*Ca4_CaM*Ca4_CN
dCa4_CaM_dt = dCa4_CaM
dCa4_CN = konB*(Cai**2)*Ca2_CN*SAcn - koffB*Ca4_CN + koffA*CaMCN - konA*Ca4_CaM*Ca4_CN
dCa4_CN_dt = dCa4_CN
dCaMCN = konA*Ca4_CaM*Ca4_CN - koffA*CaMCN
dCaF = KonFura*Cai*(BmFura - CaF) - KoffFura*CaF
dCaF_dt = dCaF
dCaMCN_dt = dCaMCN
## Extra Buffer
dCaBex = konBex*Cai*(Bmaxex-CaBex) - koffBex*CaBex
#dCaBex = koffBex/(1+(kdBex/CaiBex)**nBex)*Cai
dCaBex_dt = dCaBex
#Forward = konBex*Cai*(Bmaxex-CaBex)
#Reverse = koffBex*CaBex

expressions("Buffer_ER")
dCaS = KonCals*CaER*(BmCals/rV_ER - CaS) - KoffCals*CaS
dCaS_dt = dCaS

expressions("NCX")
nNae_NCX = Nae_NCX*SAnancx
QNCX = Q10NCX**((T_NCX-310)/10)
#Cm = uniC_NCX*AMiG      # [F] total conductance of microglia
Ka = 1/(1+(KdAct_NCX/Cai)**nHillncx)
Z = (Vncx*Fncx)/(R*T_NCX)      # [J/C*C/mol]/[J/(mol-K)*K]
delta = (Nai_NCX**HNa_NCX)*Cae_NCX
sigma = (nNae_NCX**HNa_NCX)*Cai
top_NCX = Ka*QNCX*VmaxNCX*(exp(eta_NCX*Z)*delta - exp((eta_NCX-1)*Z)*sigma)
bot_NCX = (KmCai_NCX*(nNae_NCX**HNa_NCX)*(1+(Nai_NCX/KmNai_NCX)**HNa_NCX) + (KmNao_NCX**HNa_NCX)*Cai*(1+(Cai/KmCai_NCX)) + KmCao_NCX*(Nai_NCX**HNa_NCX) + delta + sigma)*(1 + ksat_NCX*exp((eta_NCX-1))*Z)
## Current and influx via NCX
INCX = top_NCX/bot_NCX            # [A/F]
JNCX = (INCX*Cm)/(VMiG*F)*1e03 # [uM/ms]
dNCX_dt = 0

expressions("SERCA_ER")
nVmaxSERCA = VmaxSERCA*SAserca
rV_SERCA = 0.035/0.4        # Volume ratio of ER to Cytosol
QERCa = Q10ERCa**((T_SERCA-310)/10)
top_SERCA = ((Cai/Kmf_SERCA)**H_SERCA) - ((CaER/Kmr_SERCA)**H_SERCA)
bottom_SERCA = 1 + ((Cai/Kmf_SERCA)**H_SERCA) + ((CaER/Kmr_SERCA)**H_SERCA)
JERtoCyt = QERCa*nVmaxSERCA*top_SERCA/bottom_SERCA
JCyttoER = JERtoCyt*rV_SERCA # uM/ms
dSERCA_dt = 0

expressions("p-p38")
p38 = pp38t*SApp38 - pp38
dpp38_dt = -kb_pp38*pp38 + kf_pp38*p38/(1+(kdcapp38/Cai)**ncapp38)

expressions("NFAT")
CaMCN_NFAT = CaMCN*(1e3)                # in [nM]
CNt_NFAT = CNt*(1e3)
actN_NFAT = CaMCN_NFAT/CNt_NFAT
NFATNc = NFATt*SAnfat - NFATpc - NFATpn - NFATNn
J1_NFAT = kf1_NFAT*NFATpc*CaMCN_NFAT - kr1_NFAT*NFATNc*(1 - actN_NFAT)
J2_NFAT = NFATNc*kf2_NFAT
J3_NFAT = kf3_NFAT*NFATNn*(1-actN_NFAT) - kr3_NFAT*NFATpn*CaMCN_NFAT
J4_NFAT = NFATpn*kf4_NFAT
dNFATpc_dt = J4_NFAT/Ccn_NFAT - J1_NFAT     # in [nM/ms]
#dNFATNc_dt = J1_NFAT - J2_NFAT              # in [nM/ms]
dNFATNn_dt = J2_NFAT*Ccn_NFAT - J3_NFAT     # in [nM/ms]
dNFATpn_dt = J3_NFAT - J4_NFAT              # in [nM/ms]

expressions("TNFa")
Rtranscript_TNF = ktrnscrpt_TNF*NFATNn*DNA_TNF
Rtranslate_TNF = ktrnsl_TNF*mRNA_TNF

RdegTNF_TNF = kdegTNF_TNF*TNFa
RdegRNA_TNF = kdegRNA_TNF*mRNA_TNF*(1/(1+(pp38/IC50pp38_TNF)**npp38_TNF))

Rgeneexp_TNF = kgeneexpf_TNF*DNA_TNF*TNFa - kgeneexpr_TNF*DNATNF # DNATNF is the complex of DNA and TNF
Rexo_TNF = (kmaxexo_TNF/(1+(IC50Caleak_TNF/Cai)**nCaleak_TNF))*TNFa #*Cai_TNF

dDNA_TNF_dt = -Rgeneexp_TNF
dmRNA_TNF_dt = Rtranscript_TNF - RdegRNA_TNF #- Rtranslate_TNF
dDNATNF_dt = Rgeneexp_TNF
dTNFa_dt = Rtranslate_TNF - RdegTNF_TNF - Rgeneexp_TNF - Rexo_TNF
dTNFa_release_dt = Rexo_TNF

expressions("Leakage")
dCaExtoCy = DExtoCy*(CaExt - Cai)
dCaExtoCy_dt = dCaExtoCy
dCaERtoCy = DERtoCy*(CaER - Cai)
dCaERtoCy_dt = dCaERtoCy

expressions("Ca_ER")
dCaER_dt = JERtoCyt - dCaS - dCaERtoCy

expressions("Ca_cyto")
dCai_dt = (J_ptxf + J_ptxs + dCaExtoCy)*SAca - JCyttoER + JNCX - dCa2_CaM - dCa4_CaM - dCa4_CN - dCaF + dCaERtoCy  - dCaBex
dCatot_dt = J_ptxf + J_ptxs + dCaExtoCy + dCaERtoCy
dCaptxs_dt = J_ptxs
dCaptxf_dt = J_ptxf

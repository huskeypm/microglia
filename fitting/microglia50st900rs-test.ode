####  03/16/2018 Update ########################################################
# Original Python code was written by Ben Chun								   #
## rP2X4-13state-HEK293T-stimulation-cycle.ipynb located in Ben's Bitbucket   ##
################################################################################

###################################################################################
# Benchmarking "Allosteric Regulation of the P2X4 Recepter Channel Pore Dilation" #
# 	Authors:Zemkova, Khadra, Rokic, Tvrdonova, Sherman, and Stojikovic			  #
##### Model Specification 												  #########
####### 1. Cell type: HEK293T										###############
####### 2. rP2X4, rP2X7												###############
####### 3. 13-state model, 12 state model							###############
###################################################################################

parameters("stimulation",
    #stim_start = ScalarParam(10, unit="s"),
    stim_period = ScalarParam(100, unit="s"), # stim_duration = stim_period/2
    pre_rest = ScalarParam(1000, unit="s"),
    stim_space = ScalarParam(0, unit="s"), # time duration between end of pulse and beginning of pulse
    size = ScalarParam(1), # default = 1
    stim_amplitude = ScalarParam(1000, unit="uM")
    )

parameters("MSMp2x4",
    k1_ptxf = ScalarParam(0.2, unit="s**-1"),
    k2_ptxf = ScalarParam(8000000, unit="(M*s)**-1"),
    k3_ptxf = ScalarParam(0.1, unit="s**-1"),
    k4_ptxf = ScalarParam(900000000, unit="(M*s)**-1"),
    k5_ptxf = ScalarParam(0.03, unit="s**-1"),
    k6_ptxf = ScalarParam(9000000, unit="(M*s)**-1"),
    L1_ptxf = ScalarParam(0.01, unit="s**-1"),
    L2_ptxf = ScalarParam(0.04, unit="s**-1"),
    L3_ptxf = ScalarParam(0.5, unit="s**-1"),
    H1_ptxf = ScalarParam(0.013, unit="s**-1"),
    H2_ptxf = ScalarParam(0.1, unit="s**-1"),
    H3_ptxf = ScalarParam(1.56, unit="s**-1"),
    H4_ptxf = ScalarParam(0.005, unit="s**-1"),
    F_ptxf = ScalarParam(1),
    G_ptxf = ScalarParam(1)
    )

parameters("MSMp2x7",
    k1_ptxs = ScalarParam(0.0394, unit="s**-1"),
    k2_ptxs = ScalarParam(2198.52, unit="(M*s)**-1"),
    k3_ptxs = ScalarParam(0.495, unit="s**-1"),
    k4_ptxs = ScalarParam(2155.31, unit="(M*s)**-1"),
    k5_ptxs = ScalarParam(0.57, unit="s**-1"),
    k6_ptxs = ScalarParam(96.997, unit="(M*s)**-1"),
    L1_ptxs = ScalarParam(0.491, unit="s**-1"),
    L2_ptxs = ScalarParam(0.170, unit="s**-1"),
    #L3_ptxs = ScalarParam(0.051, unit="s**-1"),
    #H1_ptxs = ScalarParam(0.001, unit="s**-1"),
    #H2_ptxs = ScalarParam(0.00081, unit="s**-1"),
    H3_ptxs = ScalarParam(0.0294, unit="s**-1")
    #H4_ptxs = ScalarParam(0, unit="s**-1")
    )

parameters("Ip2x4",
    G12_ptxf = ScalarParam(3e-8, unit="C*(s*V)**-1"),
    G34_ptxf = ScalarParam(8e-8, unit="C*(s*V)**-1"),
    V_ptxf = ScalarParam(-0.06, unit="V"),
    E12_ptxf = ScalarParam(0, unit="V"),
    E34_ptxf = ScalarParam(0, unit="V"),
    CaA_ptxf = ScalarParam(0.0824) # fraction of current contributed by Calcium transport
    )

parameters("Ip2x7",
    G12_ptxs = ScalarParam(1.5e-8, unit="C*(s*V)**-1"),
    G34_ptxs = ScalarParam(4.5e-8, unit="C*(s*V)**-1"),
    V_ptxs = ScalarParam(-0.06, unit="V"),
    E12_ptxs = ScalarParam(0, unit="V"),
    E34_ptxs = ScalarParam(0, unit="V"),
    CaA_ptxs = ScalarParam(0.1) # fraction of current contributed by Calcium transport
    )

parameters("Jp2x",
    F = ScalarParam(96485.33289, unit="C*mol**-1"),
    rHEK = ScalarParam(6.5e-6, unit="m"),
    rMiG = ScalarParam(2.6e-6, unit="m"),
    expF_ptxf = ScalarParam(0.001),
    expF_ptxs = ScalarParam(0.008)
    )

parameters("Buffer_cyto",
    BmFura = ScalarParam(0.025e3, unit="uM"), # [M] -> Shannon-Bers: Fluo-3 (Cytoplasm)
    KonFura = ScalarParam(15e1, unit="(uM*s)**-1"),    # [1/(M*s)] -> Chemical Calcium Indicators: Fura-2 (Cytoplasm)
    KoffFura = ScalarParam(23, unit="s**-1"),     # [1/s] -> Chemical Calcium Indicators: Fura-2 (Cytoplasm)
    # Constants for CaM-CN calculation: taken from the work of Bazzazi et al. by Rachel
    kba  = ScalarParam(10, unit="s**-1"),        # [s-1]
    kab = ScalarParam(1e1, unit="uM**-2*s**-1"),       # [M-2*s-1]
    kcb = ScalarParam(500, unit="s**-1"),        # [s-1]
    kbc = ScalarParam(500e1, unit="uM**-2*s**-1"),     # [M-2*s-1]
    koffA = ScalarParam(1.0, unit="s**-1"),      # [s-1]
    konA = ScalarParam(1e4, unit="uM**-1*s**-1"),      # [M-1*s-1]
    konB = ScalarParam(2, unit="uM**-2*s**-1"),      # [M-2*s-1]
    koffB = ScalarParam(1, unit="s**-1"),        # [s-1]
    CNt = ScalarParam(2, unit="uM"),       #[M]
    CaMt = ScalarParam(3, unit="uM")       #[M]
    )

parameters("Buffer_ER",
    BmCals = ScalarParam(0.14e3, unit="uM"),   # [M] -> Shannon-Bers: Calsequestrin (ER)
    KonCals = ScalarParam(10e1, unit="(uM*s)**-1"),    # [1/(M*s)] -> Shannon-Bers: Calsequestrin (ER)
    KoffCals = ScalarParam(65000, unit="s**-1"),   # [1/s] -> Shannon-Bers: Calsequestrin (ER))
    rV_ER = ScalarParam(0.0875)
    )

parameters("NCX",
    R = ScalarParam(8.314, unit="J*(mol*K)**-1"),          # [J/mol-k]
    T_NCX = ScalarParam(310, unit="K"),                    # K
    VmaxNCX = ScalarParam(20.0, unit="A*F**-1"),            # [A/F] modifeid from 9
    KmCai_NCX = ScalarParam(3.59, unit="uM"),            # [M]
    KmCao_NCX = ScalarParam(1.3e3, unit="uM"),             # [M]
    KmNai_NCX = ScalarParam(12.29e3, unit="uM"),           # [M]
    KmNao_NCX = ScalarParam(87.5e3, unit="uM"),            # [M]
    ksat_NCX = ScalarParam(0.27),
    eta_NCX = ScalarParam(0.35),
    KdAct_NCX = ScalarParam(0.256, unit="uM"),      # [uM]
    HNa_NCX = ScalarParam(3),
    Q10NCX = ScalarParam(1.57),
    uniC_NCX = ScalarParam(1e-2, unit="F*m**-2"),         # [F/m**2] unit conductance
    Vncx = ScalarParam(-0.06, unit="V"),       # [V] -> the holding potential (used in NCX calculation as well)
    Fncx = ScalarParam(96485.33289, unit="C/mol"), # Faraday constant in [C/mol])
    ## Fixted substance concentrations
    Nae_NCX = ScalarParam(145e3, unit="uM"),       # [M] Exocytosolic Na free concentration
    Nai_NCX = ScalarParam(8e3, unit="uM"),         # [M] Cytosolic Na free concentration -> Neuroglia p.190 Fig 16.4 the range from 8-20 mM
    Cae_NCX = ScalarParam(2e3, unit="uM")           # [M] Exocytosolic Ca free concentration
    )

parameters("SERCA_ER",
    Q10ERCa = ScalarParam(2.6),
    VmaxSERCA = ScalarParam(5.3114e3, unit="uM*s**-1"),       # [M/s] taken from script but their literature reported differently: This may need to be adjusted
    Kmf_SERCA = ScalarParam(0.246, unit="uM"),        # [uM]
    Kmr_SERCA = ScalarParam(1.7e3, unit="uM"),          # [mM]
    H_SERCA = ScalarParam(1.787),
    T_SERCA = ScalarParam(310)                # K
    )

parameters("p-p38",
    kb_pp38 = ScalarParam(0.0018518519, unit="s**-1"),
    kf_pp38 = ScalarParam(208.33333333e-6, unit="(uM*s)**-1")
    )

parameters("NFAT",
    kf1_NFAT = ScalarParam(5.2e-7, unit="(nM*s)**-1"),    # [1/(nMs)]  7.69e-6
    kr1_NFAT = ScalarParam(1.93, unit="s**-1"),   # [1/s] 1.93e-2
    kf2_NFAT = ScalarParam(1.44, unit="s**-1"),   # [1/s] 1.44e-3
    kf3_NFAT = ScalarParam(3.62, unit="s**-1"),   # [1/s] 3.62e-4
    kr3_NFAT = ScalarParam(8.71e-1, unit="(nM*s)**-1"),   # [1/(nMs)] 4.71e-3
    kf4_NFAT = ScalarParam(4.45, unit="s**-1"),   # [1/s] 4.45e-4
    KmN_NFAT = ScalarParam(535, unit="nM"),        # [nM]
    n_NFAT = ScalarParam(2.92),
    Ccn_NFAT = ScalarParam(1),          # Volume ratio of Cytosol to Nucleus
    CNt_NFAT = ScalarParam(2e3, unit="nM")             # in [nM] Total number of calcineurin: this value is the same as used in    buffer calculation
    )


parameters("TNFa",
    ktrnscrpt_TNF = ScalarParam(277.78e-6, unit="s**-1"),   # 1/3600            # [1/s]: k for transcription of mRNA from DNA per molecule
    ktrnsl_TNF = ScalarParam(27.7778e-3, unit="s**-1"),     # 100/3600          # [1/s]: k for translation of TNFa from mRNA per molecule
    kdegTNF_TNF = ScalarParam(13.8889e-3, unit="s**-1"),    # 50/3600           # [1/s]: the rate of degradation of TNFa per molecule
    kdegRNA_TNF = ScalarParam(138.88889e-6, unit="s**-1"),   # 0.5/3600          # [1/s]: the rate of degradation of mRNA per molecule
    kgeneexpf_TNF = ScalarParam(111.11e-6, unit="(molecule*s)**-1"),   # 1/(3600*2.5)      # [1/(molecule-s)]: Gene expression
    kgeneexpr_TNF = ScalarParam(277.78e-6, unit="s**-1"),   # 1/3600            # [1/s]:
    #kfpp38_TNF = ScalarParam(555.5556e-6, unit="(M*s)**-1"),    # 2/3600            # 2 count per 3600 seconds
    ### Hill equation related constants for activation of DNA dynamics/TNFa release
    kmaxexo_TNF = ScalarParam(2.777778e-3, unit="(uM*s)**-1"),    # 5/1800             # [1/(M-s)]: R max of exocytosis of TNFa 150 15 15 10 1
    nCaleak_TNF = ScalarParam(3),
    #nNFAT1_TNF = ScalarParam(80),             # Hill coefficient of NFAT related to transcription activation
    #IC50NFAT1_TNF = ScalarParam(0.5, unit="nM"),         # [nM] Transcription related
    IC50Caleak_TNF = ScalarParam(0.2, unit="uM")         # [uM]: TNFa leaks related 4e-7 4e-7 1e-7 1e-7 1e-7
    )

parameters("Leakage",
    CaExt = ScalarParam(2e3, unit="uM"),      # External Ca concentration in [M]
    DExtoCy = ScalarParam(0.0003822, unit="s**-1"),    # Diffusion constant of Ca from External to Cytosol - Fitted
    DERtoCy = ScalarParam(0.00000, unit="s**-1")     # Diffusion constant of Ca from ER to Cytosol
    )

states("MSMp2x4",
    D1_ptxf = 0.0,
    D2_ptxf = 0.0,
    D3_ptxf = 0.0,
    D4_ptxf = 0.0,
    C1_ptxf = 1.0,
    C2_ptxf = 0.0,
    C3_ptxf = 0.0,
    C4_ptxf = 0.0,
    Q1_ptxf = 0.0,
    Q2_ptxf = 0.0,
    Q3_ptxf = 0.0,
    Q4_ptxf = 0.0,
    N_ptxf = 0.0
    )

states("MSMp2x7",
    D1_ptxs = 0.0,
    D2_ptxs = 0.0,
    D3_ptxs = 0.0,
    D4_ptxs = 0.0,
    C1_ptxs = 1.0,
    C2_ptxs = 0.0,
    C3_ptxs = 0.0,
    C4_ptxs = 0.0,
    Q1_ptxs = 0.0,
    Q2_ptxs = 0.0,
    Q3_ptxs = 0.0,
    Q4_ptxs = 0.0,
    )

states("Ca_cyto",
    Cai = ScalarParam(9.51e-2, unit="uM")        # M
    )

states("Buffer_cyto",
    CaF = ScalarParam(9.56, unit="uM"),         # M
    Ca2_CaM = ScalarParam(0, unit="uM"),                   # M
    Ca4_CaM = ScalarParam(0, unit="uM"),                   # M
    Ca4_CN = ScalarParam(0, unit="uM"),                    # M
    CaMCN = ScalarParam(0, unit="uM")                       # M
    )

states("Ca_ER",
    CaER = ScalarParam(6.5e2, unit="uM")       # M
    )

states("Buffer_ER",
    CaS = ScalarParam(8.0e2, unit="uM")        # M
    )

states("SERCA_ER",
    SERCA = 0
    )

states("NFAT",
    NFATpc = ScalarParam(0.994682667758, unit="nM"),        # nM
    NFATpn = ScalarParam(0.0463772043925, unit="nM"),       # nM
    NFATNc = ScalarParam(0.000112322167638, unit="nM"),     # nM
    NFATNn = ScalarParam(0.0581439005689, unit="nM")        # nM
    )

states("NCX",
    NCX = 0
    )

states("p-p38",
    pp38 = ScalarParam(0, unit="molecule"),                      # molecule
    p38 = ScalarParam(50, unit="molecule")                        # molecule
    )

states("TNFa",
    DNA_TNF = ScalarParam(50, unit="molecule"),                  # molecule
    DNATNF = ScalarParam(0, unit="molecule"),                    # molecule
    mRNA_TNF = ScalarParam(0, unit="molecule"),                  # molecule
    TNFa = ScalarParam(100, unit="molecule"),                    # molecule
    TNFa_release = ScalarParam(0, unit="molecule")               # molecule
    )

states("Leakage",
    CaExtoCy = ScalarParam(0, unit="uM"), # in [M]
    CaERtoCy = ScalarParam(0, unit="uM")  # in [M]
    )

states("Cell",
    V = 0,
    logATP = -6
    )

expressions("Cell")
dV_dt = 0
stim_start = stim_period/2
stim_period2 = stim_period/4
ntime = Conditional(Le((time-pre_rest),0),0,(time-pre_rest))
STC = Conditional(Le((time-pre_rest),0),0,1)
dlogATP_dt = 1*(sin(1*3.141*(ntime-stim_period2)/stim_period2))*STC
#dlogATP_dt = 1*(sin(1*3.141*(ntime-stim_period2)/stim_period2))
##ATP = 10**(logATP)*stim_amplitude
ATP71 = Conditional(Le(stim_amplitude,4.118),stim_amplitude,4.11863563*exp(stim_amplitude*0.00479906))
stim_amplitude_ptxs = ATP71*10**-6
stim_amplitude_ptxf = stim_amplitude*1e-6

ATP41 = Conditional(Le(ntime,0.33*stim_start),0,10**(logATP)*stim_amplitude)
ATP72 = Conditional(Le(ntime,0.33*stim_start),0,ATP71*10**(logATP))

#stim_period3 = stim_period
stim_period3 = stim_period*size
total_space = stim_space + stim_period
rest_start = pre_rest + stim_period/4

ATPptxf1 = Conditional(And(Ge(ntime - floor(ntime/(stim_period3))*(stim_period3), stim_start), Le(ntime - floor(ntime/(stim_period3))*(stim_period3), stim_period3), ), stim_amplitude_ptxf, ATP41)
ATPptxf2 = Conditional(And(Ge(time,(rest_start+size*stim_period+0*total_space)),Le(time,(rest_start+1*total_space)),),0,ATPptxf1)
ATPptxf3 = Conditional(And(Ge(time,(rest_start+size*stim_period+1*total_space)),Le(time,(rest_start+2*total_space)),),0,ATPptxf2)
ATPptxf4 = Conditional(And(Ge(time,(rest_start+size*stim_period+2*total_space)),Le(time,(rest_start+3*total_space)),),0,ATPptxf3)
ATPptxf5 = Conditional(And(Ge(time,(rest_start+size*stim_period+3*total_space)),Le(time,(rest_start+4*total_space)),),0,ATPptxf4)
ATPptxf6 = Conditional(And(Ge(time,(rest_start+size*stim_period+4*total_space)),Le(time,(rest_start+5*total_space)),),0,ATPptxf5)
ATPptxf7 = Conditional(And(Ge(time,(rest_start+size*stim_period+5*total_space)),Le(time,(rest_start+6*total_space)),),0,ATPptxf6)
ATPptxf8 = Conditional(And(Ge(time,(rest_start+size*stim_period+6*total_space)),Le(time,(rest_start+7*total_space)),),0,ATPptxf7)
ATPptxf9 = Conditional(And(Ge(time,(rest_start+size*stim_period+7*total_space)),Le(time,(rest_start+8*total_space)),),0,ATPptxf8)
ATPptxf10 = Conditional(And(Ge(time,(rest_start+size*stim_period+8*total_space)),Le(time,(rest_start+9*total_space)),),0,ATPptxf9)
ATPptxf = Conditional(And(Ge(time,(rest_start+size*stim_period+9*total_space)),Le(time,(rest_start+10*total_space)),),0,ATPptxf10)

ATPptxs1 = Conditional(And(Ge(ntime - floor(ntime/(stim_period3))*(stim_period3), stim_start), Le(ntime - floor(ntime/(stim_period3))*(stim_period3), stim_period3), ), stim_amplitude_ptxs, ATP72)
ATPptxs2 = Conditional(And(Ge(time,(rest_start+size*stim_period+0*total_space)),Le(time,(rest_start+1*total_space)),),0,ATPptxs1)
ATPptxs3 = Conditional(And(Ge(time,(rest_start+size*stim_period+1*total_space)),Le(time,(rest_start+2*total_space)),),0,ATPptxs2)
ATPptxs4 = Conditional(And(Ge(time,(rest_start+size*stim_period+2*total_space)),Le(time,(rest_start+3*total_space)),),0,ATPptxs3)
ATPptxs5 = Conditional(And(Ge(time,(rest_start+size*stim_period+3*total_space)),Le(time,(rest_start+4*total_space)),),0,ATPptxs4)
ATPptxs6 = Conditional(And(Ge(time,(rest_start+size*stim_period+4*total_space)),Le(time,(rest_start+5*total_space)),),0,ATPptxs5)
ATPptxs7 = Conditional(And(Ge(time,(rest_start+size*stim_period+5*total_space)),Le(time,(rest_start+6*total_space)),),0,ATPptxs6)
ATPptxs8 = Conditional(And(Ge(time,(rest_start+size*stim_period+6*total_space)),Le(time,(rest_start+7*total_space)),),0,ATPptxs7)
ATPptxs9 = Conditional(And(Ge(time,(rest_start+size*stim_period+7*total_space)),Le(time,(rest_start+8*total_space)),),0,ATPptxs8)
ATPptxs10 = Conditional(And(Ge(time,(rest_start+size*stim_period+8*total_space)),Le(time,(rest_start+9*total_space)),),0,ATPptxs9)
ATPptxs = Conditional(And(Ge(time,(rest_start+size*stim_period+9*total_space)),Le(time,(rest_start+10*total_space)),),0,ATPptxs10)

expressions("MSMp2x4")
dD1_ptxf_dt = k1_ptxf*D2_ptxf - (3*k2_ptxf*ATPptxf + H1_ptxf)*D1_ptxf
dD2_ptxf_dt = 3*k2_ptxf*ATPptxf*D1_ptxf + 2*k3_ptxf*D3_ptxf + H2_ptxf*C2_ptxf - (k1_ptxf + 2*k4_ptxf*ATPptxf)*D2_ptxf
dD3_ptxf_dt = 2*k4_ptxf*ATPptxf*D2_ptxf + 3*k5_ptxf*D4_ptxf + H2_ptxf*Q1_ptxf - (2*k3_ptxf + k6_ptxf*ATPptxf)*D3_ptxf
dD4_ptxf_dt = k6_ptxf*ATPptxf*D3_ptxf + H2_ptxf*Q2_ptxf - (3*k5_ptxf + H3_ptxf)*D4_ptxf
dC1_ptxf_dt = H1_ptxf*D1_ptxf + k1_ptxf*G_ptxf*C2_ptxf + L1_ptxf*C4_ptxf + H4_ptxf*N_ptxf - 3*k2_ptxf*ATPptxf*F_ptxf*C1_ptxf
dC2_ptxf_dt = 3*k2_ptxf*ATPptxf*F_ptxf*C1_ptxf + 2*k3_ptxf*G_ptxf*Q1_ptxf - (k1_ptxf*G_ptxf + 2*k4_ptxf*ATPptxf*F_ptxf + H2_ptxf)*C2_ptxf
dC3_ptxf_dt = 3*k2_ptxf*ATPptxf*F_ptxf*C4_ptxf + 2*k1_ptxf*G_ptxf*Q4_ptxf - (k1_ptxf*G_ptxf + 2*k2_ptxf*ATPptxf*F_ptxf)*C3_ptxf
dC4_ptxf_dt = k1_ptxf*G_ptxf*C3_ptxf - (L1_ptxf + 3*k2_ptxf*ATPptxf*F_ptxf)*C4_ptxf
dQ1_ptxf_dt = 2*k4_ptxf*ATPptxf*F_ptxf*C2_ptxf + 3*k5_ptxf*G_ptxf*Q2_ptxf - (2*k3_ptxf*G_ptxf + k6_ptxf*ATPptxf*F_ptxf + H2_ptxf)*Q1_ptxf
dQ2_ptxf_dt = k6_ptxf*ATPptxf*F_ptxf*Q1_ptxf + L2_ptxf*Q3_ptxf - (3*k5_ptxf*G_ptxf + L3_ptxf*(1-G_ptxf) + H2_ptxf)*Q2_ptxf
dQ3_ptxf_dt = k2_ptxf*ATPptxf*F_ptxf*Q4_ptxf + L3_ptxf*(1-G_ptxf)*Q2_ptxf - (3*k1_ptxf*G_ptxf + L2_ptxf)*Q3_ptxf
dQ4_ptxf_dt = 2*k2_ptxf*ATPptxf*F_ptxf*C3_ptxf + 3*k1_ptxf*G_ptxf*Q3_ptxf - (2*k1_ptxf*G_ptxf + k2_ptxf*ATPptxf*F_ptxf)*Q4_ptxf
dN_ptxf_dt = H3_ptxf*D4_ptxf - H4_ptxf*N_ptxf

expressions("MSMp2x7")

L3_ptxs = Conditional(Ge(stim_amplitude,500),0.51,0.051)
H1_ptxs = Conditional(Ge(stim_amplitude,500),2.437,0.001)
H2_ptxs = Conditional(Ge(stim_amplitude,500),0.00001,0.00081)
H4_ptxs = Conditional(Ge(stim_amplitude,500),0.001,0)

dD1_ptxs_dt = k1_ptxs*D2_ptxs - (3*k2_ptxs*ATPptxs + H1_ptxs)*D1_ptxs #
dD2_ptxs_dt = 3*k2_ptxs*ATPptxs*D1_ptxs + 2*k3_ptxs*D3_ptxs + H2_ptxs*C2_ptxs - (k1_ptxs + 2*k4_ptxs*ATPptxs + H4_ptxs)*D2_ptxs #
dD3_ptxs_dt = 2*k4_ptxs*ATPptxs*D2_ptxs + 3*k5_ptxs*D4_ptxs + H3_ptxs*Q1_ptxs - (2*k3_ptxs + k6_ptxs*ATPptxs)*D3_ptxs #
dD4_ptxs_dt = k6_ptxs*ATPptxs*D3_ptxs + H2_ptxs*Q2_ptxs - 3*k5_ptxs*D4_ptxs #
dC1_ptxs_dt = H1_ptxs*D1_ptxs + k1_ptxs*C2_ptxs + L1_ptxs*C4_ptxs - 3*k2_ptxs*ATPptxs*C1_ptxs #
dC2_ptxs_dt = H4_ptxs*D2_ptxs + 3*k2_ptxs*ATPptxs*C1_ptxs + 2*k3_ptxs*Q1_ptxs - (k1_ptxs + 2*k4_ptxs*ATPptxs + H2_ptxs)*C2_ptxs #
dC3_ptxs_dt = 3*k2_ptxs*ATPptxs*C4_ptxs + 2*k1_ptxs*Q4_ptxs - (k1_ptxs + 2*k2_ptxs*ATPptxs)*C3_ptxs #
dC4_ptxs_dt = k1_ptxs*C3_ptxs - (L1_ptxs + 3*k2_ptxs*ATPptxs)*C4_ptxs #
dQ1_ptxs_dt = 2*k4_ptxs*ATPptxs*C2_ptxs + 3*k5_ptxs*Q2_ptxs - (2*k3_ptxs + k6_ptxs*ATPptxs + H3_ptxs)*Q1_ptxs #
dQ2_ptxs_dt = k6_ptxs*ATPptxs*Q1_ptxs + L2_ptxs*Q3_ptxs - (3*k5_ptxs + L3_ptxs + H2_ptxs)*Q2_ptxs #
dQ3_ptxs_dt = k2_ptxs*ATPptxs*Q4_ptxs + L3_ptxs*Q2_ptxs - (3*k1_ptxs + L2_ptxs)*Q3_ptxs #
dQ4_ptxs_dt = 2*k2_ptxs*ATPptxs*C3_ptxs + 3*k1_ptxs*Q3_ptxs - (2*k1_ptxs + k2_ptxs*ATPptxs)*Q4_ptxs #

expressions("Ip2x4")
I_ptxf = (G12_ptxf*(Q1_ptxf + Q2_ptxf)*(V_ptxf - E12_ptxf) + G34_ptxf*(Q3_ptxf + Q4_ptxf)*(V_ptxf - E34_ptxf))*10**6 # in [uA]

expressions("Ip2x7")
I_ptxs = (G12_ptxs*(Q1_ptxs + Q2_ptxs)*(V_ptxs - E12_ptxs) + G34_ptxs*(Q3_ptxs + Q4_ptxs)*(V_ptxs - E34_ptxs))*10**6 # in [uA]

expressions("Jp2x")
AHEK = 4*3.141592654*(rHEK)**2 # surface area of HEK293 cell in [sq. meter]
AMiG = 4*3.141592654*(rMiG)**2 # surface area of microglia in [sq. meter]
VHEK = 1000*(4/3)*3.141592654*(rHEK)**3 # volume of HEK293 cell in [L]
VMiG = 1000*(4/3)*3.141592654*(rMiG)**3 # volume of microglia in [L]
VcytHEK = VHEK*0.65 # [L] The volume of cytoplasm in HEK293 cells -> This fraction was taken from Shannon-Bers paper
VcytMiG = VMiG*0.40 # [L] The volume of cytoplasm in microglia -> This fraction was estimated from the figure (Liaury).
VERMiG = VMiG*0.035 # [L] The volume of ER lumen in microglia -> This fraction was taken from Shannon-Bers paper
J_ptxf = -(I_ptxf/VcytMiG)*(AMiG/AHEK)/(2*F)*expF_ptxf # [umol/(L*s) = uM/s]
J_ptxs = -(I_ptxs/VcytMiG)*(AMiG/AHEK)/(2*F)*expF_ptxs # [umol/(L*s) = uM/s]

expressions("Buffer_cyto")
CaM = CaMt - (Ca2_CaM + Ca4_CaM + CaMCN)
Ca2_CN = CNt - (Ca4_CN + CaMCN)
dCa2_CaM = kab*CaM*(Cai**2) - kba*Ca2_CaM + kcb*Ca4_CaM - kbc*Ca2_CaM*(Cai**2)
dCa2_CaM_dt = dCa2_CaM
dCa4_CaM = kbc*(Cai**2)*Ca2_CaM - kcb*Ca4_CaM + koffA*CaMCN - konA*Ca4_CaM*Ca4_CN
dCa4_CaM_dt = dCa4_CaM
dCa4_CN = konB*(Cai**2)*Ca2_CN - koffB*Ca4_CN + koffA*CaMCN - konA*Ca4_CaM*Ca4_CN
dCa4_CN_dt = dCa4_CN
dCaMCN = konA*Ca4_CaM*Ca4_CN - koffA*CaMCN
dCaF = KonFura*Cai*(BmFura - CaF) - KoffFura*CaF
dCaF_dt = dCaF
dCaMCN_dt = dCaMCN

expressions("Buffer_ER")
dCaS = KonCals*CaER*(BmCals/rV_ER - CaS) - KoffCals*CaS
dCaS_dt = dCaS

expressions("NCX")
QNCX = Q10NCX**((T_NCX-310)/10)
Cm = uniC_NCX*AMiG      # [F] total conductance of microglia
Ka = 1/(1+(KdAct_NCX/(Cai)**3))
Z = (Vncx*Fncx)/(R*T_NCX)      # [J/C*C/mol]/[J/(mol-K)*K]
delta = (Nai_NCX**HNa_NCX)*Cae_NCX
sigma = (Nae_NCX**HNa_NCX)*Cai
top_NCX = Ka*QNCX*VmaxNCX*(exp(eta_NCX*Z)*delta - exp((eta_NCX-1)*Z)*sigma)
bot_NCX = (KmCai_NCX*(Nae_NCX**HNa_NCX)*(1+(Nai_NCX/KmNai_NCX)**HNa_NCX) + (KmNao_NCX**HNa_NCX)*Cai*(1+(Cai/KmCai_NCX)) + KmCao_NCX*(Nai_NCX**HNa_NCX) + delta + sigma)*(1 + ksat_NCX*exp((eta_NCX-1))*Z)
## Current and influx via NCX
INCX = top_NCX/bot_NCX            # [A/F]
JNCX = (INCX*Cm)/(VMiG*F)*1e06 # [uM/s]
dNCX_dt = 0

expressions("SERCA_ER")
rV_SERCA = 0.035/0.4        # Volume ratio of ER to Cytosol
QERCa = Q10ERCa**((T_SERCA-310)/10)
top_SERCA = ((Cai/Kmf_SERCA)**H_SERCA) - ((CaER/Kmr_SERCA)**H_SERCA)
bottom_SERCA = 1 + ((Cai/Kmf_SERCA)**H_SERCA) + ((CaER/Kmr_SERCA)**H_SERCA)
JERtoCyt = QERCa*VmaxSERCA*top_SERCA/bottom_SERCA
JCyttoER = JERtoCyt*rV_SERCA
dSERCA_dt = 0

expressions("p-p38")
dpp38_dt = -kb_pp38*pp38 + kf_pp38*p38*Cai
dp38_dt = kb_pp38*pp38 - kf_pp38*p38*Cai

expressions("NFAT")
CaMCN_NFAT = CaMCN*(1e3)                # in [nM]
actN_NFAT = CaMCN_NFAT/CNt_NFAT
J1_NFAT = kf1_NFAT*NFATpc*CaMCN_NFAT - kr1_NFAT*NFATNc*(1 - actN_NFAT)
J2_NFAT = NFATNc*kf2_NFAT
J3_NFAT = kf3_NFAT*NFATNn*(1-actN_NFAT) - kr3_NFAT*NFATpn*CaMCN_NFAT
J4_NFAT = NFATpn*kf4_NFAT
dNFATpc_dt = J4_NFAT/Ccn_NFAT - J1_NFAT     # in [nM]
dNFATNc_dt = J1_NFAT - J2_NFAT              # in [nM]
dNFATNn_dt = J2_NFAT*Ccn_NFAT - J3_NFAT     # in [nM]
dNFATpn_dt = J3_NFAT - J4_NFAT              # in [nM]

expressions("TNFa")
Cai_TNF = Cai
Rtranscript_TNF = ktrnscrpt_TNF*NFATNn*DNA_TNF
Rtranslate_TNF = ktrnsl_TNF*mRNA_TNF
RdegTNF_TNF = kdegTNF_TNF*TNFa
RdegRNA_TNF = kdegRNA_TNF*mRNA_TNF*pp38
Rgeneexp_TNF = kgeneexpf_TNF*DNA_TNF*TNFa - kgeneexpr_TNF*DNATNF # DNATNF is the complex of DNA and TNF
Rexo_TNF = (kmaxexo_TNF/(1+(IC50Caleak_TNF/(Cai_TNF))**nCaleak_TNF))*TNFa*Cai_TNF
dDNA_TNF_dt = -Rgeneexp_TNF
dmRNA_TNF_dt = Rtranscript_TNF - RdegRNA_TNF
dDNATNF_dt = Rgeneexp_TNF
dTNFa_dt = Rtranslate_TNF - RdegTNF_TNF - Rgeneexp_TNF - Rexo_TNF
dTNFa_release_dt = Rexo_TNF


expressions("Leakage")
dCaExtoCy = DExtoCy*(CaExt - Cai)
dCaExtoCy_dt = dCaExtoCy
dCaERtoCy = DERtoCy*(CaER - Cai)
dCaERtoCy_dt = dCaERtoCy

expressions("Ca_ER")
dCaER_dt = JERtoCyt - dCaS - dCaERtoCy

expressions("Ca_cyto")
dCai_dt = J_ptxf + J_ptxs - JCyttoER + JNCX - dCa2_CaM - dCa4_CaM - dCa4_CN - dCaF + dCaERtoCy + dCaExtoCy
